.\"Modified from man(1) of FreeBSd, the NetBSD mdoc.template, and mdoc.samples.
.\"See Also:
.\"man mdoc.samples for a complete listing of options
.\"man mdoc for the short list of editing options
.\"/usr/share/misc/mdoc.template
.Dd 8/4/10               \" DATE
.Dt Printf 1  \" Program name andmanual section number
.Os Darwin
.Sh NAME                 \" Section Header - required - don't modify
.Nm Printf,
.\" The following lines are read in generating the apropos(man -k) database. Use only key
.\" words here as the database is built based on the words here and in the .ND line.
.Nm printf, fprintf, sprintf, snprintf, vprintf, vfprintf, vsprintf, vsnprintf - formatted output conversion

.Nm 
.\" Use .Nm macro to designate other names for the documented program.
.Nd 
.Sh SYNOPSIS             \" Section Header - required - don't modify
.Nm

.Ope              #include <stdio.h>

     int
     printf(const char * restrict format, ...);

     int
     fprintf(FILE * restrict stream, const char * restrict format, ...);

     int
     sprintf(char * restrict str, const char * restrict format, ...);

     int
     snprintf(char * restrict str, size_t size, const char * restrict format,
         ...);

     int
     asprintf(char **ret, const char *format, ...);

     int
     dprintf(int fd, const char * restrict format, ...);

     #include <stdarg.h>

     int
     vprintf(const char * restrict format, va_list ap);

     int
     vfprintf(FILE * restrict stream, const char * restrict format,
         va_list ap);

     int
     vsprintf(char * restrict str, const char * restrict format, va_list ap);

     int
     vsnprintf(char * restrict str, size_t size, const char * restrict format,
         va_list ap);

     int
     vasprintf(char **ret, const char *format, va_list ap);

     int
     vdprintf(int fd, const char * restrict format, va_list ap);
]
.Op Ar                   \" [file ...]
.Ar arg0                 \" Underlined argument - use .Ar anywhere to underline
arg2 ...                 \" Arguments
.Sh DESCRIPTION          \" Section Header - required - don't modify
The printf function and its respective family gives results with the format described lines below. Among the functions line below.
Printf() and vprintf output to stdout.
.Nm
     The format string is composed of zero or more directives: ordinary char-
     acters (not %), which are copied unchanged to the output stream; and con-
     version specifications, each of which results in fetching zero or more
     subsequent arguments.  Each conversion specification is introduced by the
     % character.  The arguments must correspond properly (after type promo-
     tion) with the conversion specifier.  After the %, the following appear
     in sequence:
:
.Ar underlined text .
.Pp                      \" Inserts a space
A list of items with descriptions:
.Bl -tag -width -indent  \" Begins a tagged list
               \" Each item preceded by .It macro
.El                      \" Ends the list
.Pp
A list of flags and their descriptions:
.Bl -tag -width -indent  \" Differs from above in tag removed
.It Fl `#'                \"-a flag as a list item
The value should be converted to an ``alternate form''.
                      For c, d, i, n, p, s, and u conversions, this option has
                      no effect.  For o conversions, the precision of the num-
                      ber is increased to force the first character of the
                      output string to a zero.
.It Fl `0' (zero)
Zero padding.  For all conversions except n, the con-
                      verted value is padded on the left with zeros rather
                      than blanks.
.It Fl `-' 
A negative field width flag; the converted value is to
                      be left adjusted on the field boundary.
.It Fl ` ' (space)
A blank should be left before a positive number produced
                      by a signed conversion (a, A, d, e, E, f, F, g, G, or
                      i).
.It  `+' 
A sign must always be placed before a number produced by
                      a signed conversion.
.It `''
Decimal conversions

.El                      \" Ends the list
.Pp
.\" .Sh ENVIRONMENT      \" May not be needed
.\" .Bl -tag -width "ENV_VAR_1" -indent \" ENV_VAR_1 is width of the string ENV_VAR_1
.\" .It Ev ENV_VAR_1
.\" Description of ENV_VAR_1
.\" .It Ev ENV_VAR_2
.\" Description of ENV_VAR_2
.\" .El
.Sh Examples                \" File used or created by the topic of the man page
.Bl -tag -width "/Users/joeuser/Library/really_long_file_name" -compact
.It 
.Ope #include "holberton.h"
.Ope #include <stdlib.h>

/**
 * print_c - prints a char
 * @c: char to print
 *
 * Return: always 1
 */
int print_c(va_list c)
{
	char ch = (char)va_arg(c, int);

	_putchar(ch);
	return (1);
}

/**
 * print_s - prints a string
 * @s: string to print
 *
 * Return: number of chars printed
 */
int print_s(va_list s)
{
	int count;
	char *str = va_arg(s, char *);

	if (str == NULL)
	   str = "(null)";
	   for (count = 0; str[count]; count++)
	   {
		_putchar(str[count]);
		}
		return (count);
}

/**
 * hex_print - prints a char's ascii value in uppercase hex
 * @c: char to print
 *
 * Return: number of chars printed (always 2)
 */
static int hex_print(char c)
{
	int count;
	char diff = 'A' - ':';
	char d[2];

	d[0] = c / 16;
	d[1] = c % 16;
	for (count = 0; count < 2; count++)
	{
		if (d[count] >= 10)
		   	     _putchar('0' + diff + d[count]);
			     		  else
							_putchar('0' + d[count]);
							}
							return (count);
}

/**
 * print_S - prints a string and nonprintable character ascii values
 * @S: string to print
 *
 * Return: number of chars printed
 */
int print_S(va_list S)
{
	unsigned int i;
	int count = 0;
	char *str = va_arg(S, char *);

	if (str == NULL)
	   str = "(null)";
	   for (i = 0; str[i]; i++)
	   {
		if (str[i] < 32 || str[i] >= 127)
		   {
				_putchar('\\');
						_putchar('x');
								count += 2;
								      	 count += hex_print(str[i]);
									       }
										else
											{
													_putchar(str[i]);
															count++;
															 }
															 }
															 return (count);
}

/**
 * print_r - prints astring in reverse
 * @r: string to print
 *
 * Return: number of chars printed
 */
int print_r(va_list r)
{
	char *str;
	int i, count = 0;

	str = va_arg(r, char *);
	if (str == NULL)
	   str = ")llun(";
	   for (i = 0; str[i]; i++)
	       ;
	       for (i -= 1; i >= 0; i--)
	       {
		_putchar(str[i]);
			count++;
			}
			return (count);
}
]

.El                      \" Ends the list
.\" .Sh DIAGNOSTICS       \" May not be needed
.\" .Bl -diag
.\" .It Diagnostic Tag
.\" Diagnostic informtion here.
.\" .It Diagnostic Tag
.\" Diagnostic informtion here.
.\" .El
.Sh Error
.Bl
.It
Core Dump (Segmentation fault): Core Dump/Segmentation fault is a specific kind of error caused by accessing memory that “does not belong to you.”

When a piece of code tries to do read and write operation in a read only location in memory or freed block of memory, it is known as core dump.
It is an error indicating memory corruption.

.Sh SEE ALSO
.\" List links in ascending order by section, alphabetically within a section.
.\" Please do not reference files that do not exist without filing a bug report
.Xr Printf 1 ,
.Xr printf_l 3 ,
.EL
.EL

.SH AUTHOR
Juan Daniel Lopez Garcia and Omar Torres